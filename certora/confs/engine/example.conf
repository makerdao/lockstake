{
    "files": [
        "src/LockstakeEngine.sol",
        // Using two possible urns
        "certora/harness/urns/LockstakeUrnHarness1.sol",
        "certora/harness/urns/LockstakeUrnHarness2.sol",
        "test/mocks/Jug.sol",
        "test/mocks/Vat.sol",
        "test/mocks/DelegateMock.sol",
        "test/mocks/DelegateMock.sol:DelegateFactoryMock",
        "test/mocks/GemMock.sol",
        "test/mocks/NstJoinMock.sol",
        "test/mocks/MkrNgtMock.sol",
        "test/mocks/LockstakeEngineMock.sol",
        "test/mocks/StakingRewardsMock.sol"
    ],
    "solc": "solc8.16",
    "verify": "LockstakeEngine:certora/specs/engine/example.spec",
    "parametric_contracts": ["LockstakeEngine"],
    "optimistic_loop": true,
    "loop_iter": "2",
    "rule_sanity": "basic",
    "link": [
        "LockstakeEngine:jug=Jug",
        "LockstakeEngine:vat=Vat",
        "LockstakeEngine:nst=GemMock",
        "LockstakeEngine:mkr=GemMock",
        "LockstakeEngine:stkMkr=GemMock",
        "LockstakeEngine:ngt=GemMock",
        "LockstakeEngine:mkrNgt=MkrNgtMock",
        "LockstakeEngine:nstJoin=NstJoinMock",
        "LockstakeEngine:delegateFactory=DelegateFactoryMock",
        "MkrNgtMock:mkr=GemMock",
        "MkrNgtMock:ngt=GemMock",
        "LockstakeEngineMock:vat=Vat",
        "StakingRewardsMock:rewardsToken=GemMock",
        "StakingRewardsMock:stakingToken=GemMock",
        "NstJoinMock:vat=Vat",
        "NstJoinMock:nst=GemMock",
        "Jug:vat=Vat",
        "DelegateFactoryMock:gov=GemMock",
        "DelegateMock:gov=GemMock",
        // NOTE: both urns using the SAME stkMkr token and the same Vat!
        "LockstakeUrnHarness1:vat=Vat",
        "LockstakeUrnHarness2:vat=Vat",
        "LockstakeUrnHarness1:stkMkr=GemMock",
        "LockstakeUrnHarness2:stkMkr=GemMock"
    ],
    "msg": "LockstakeEngine spec example"
}
